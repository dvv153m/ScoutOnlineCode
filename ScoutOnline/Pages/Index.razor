@page "/"
@using System.Drawing
@using BlazorLeaflet.Models
@inject IJSRuntime jsRuntime
@inject ScoutOnline.Core.Map.MapsService MapService

<label style="margin-left:20px">Карта:</label>
<select name="example" @onchange="ChangeMap">
    @foreach (var map in MapService.Maps)
    {
        <option value="@map.Key">@map.Value.Title</option>
    }    
</select>
<div id="mapContainer" style="margin-top:10px; width: 100%; height: 90vh;">
    <LeafletMap Map="_map" />
</div>

@code{

    private Map _map;

    private LatLng _startAt = new LatLng(59.948080f, 30.326621f);

    private TileLayer CurrentLayer;

    private void ChangeMap(ChangeEventArgs arg)
    {
        var mapType = arg.Value.ToString();        

        var map = MapService.Maps.Where(m => m.Key.ToString() == mapType).FirstOrDefault();

        _map.RemoveLayer(CurrentLayer);

        CurrentLayer = new TileLayer
        {
            UrlTemplate = map.Value.BaseUrl,
            Subdomains = map.Value.Subdomains,
            MaximumZoom = map.Value.MaxZoom,
            Attribution = map.Value.Attribution,
        };

        _map.AddLayer(CurrentLayer);        
    }

    protected override void OnInitialized()
    {
        _map = new Map(jsRuntime)
        {
            Center = _startAt,
            Zoom = 7.8f
        };

        ScoutOnline.Core.Map.MapInfo map = MapService.Maps[Core.Map.MapType.Openstreet];

        CurrentLayer = new TileLayer
        {
            UrlTemplate = map.BaseUrl,
            Subdomains = map.Subdomains,
            MaximumZoom = map.MaxZoom,
            Attribution = map.Attribution           
        };

        _map.OnInitialized += () =>
        {
            _map.AddLayer(CurrentLayer);
        };
    }
}
